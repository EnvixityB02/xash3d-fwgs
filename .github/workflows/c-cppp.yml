name: Build & Deploy Engine Extra
on: [push, pull_request]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-22.04
            targetos: linux
            targetarch: amd64
          - os: ubuntu-22.04
            targetos: linux
            targetarch: i386
          - os: ubuntu-22.04
            targetos: linux
            targetarch: arm64
            cross: true
          - os: ubuntu-22.04
            targetos: linux
            targetarch: armhf
            cross: true
          - os: ubuntu-24.04
            targetos: linux
            targetarch: riscv64
            cross: true
          - os: ubuntu-22.04
            targetos: linux
            targetarch: ppc64el
            cross: true
          # Android, Switch, Vita, Windows, macOS
          - os: ubuntu-latest
            targetos: android
            targetarch: multiarch
          - os: ubuntu-latest
            targetos: nswitch
            targetarch: arm64
          - os: ubuntu-latest
            targetos: psvita
            targetarch: armv7hf
          - os: windows-latest
            targetos: win32
            targetarch: amd64
          - os: windows-2022
            targetos: win32
            targetarch: i386
          - os: macos-14
            targetos: apple
            targetarch: arm64
          - os: macos-13
            targetos: apple
            targetarch: amd64
    env:
      SDL_VERSION: 2.32.8
      FFMPEG_VERSION: 7.1
      GH_CPU_ARCH: ${{ matrix.targetarch }}
      GH_CPU_OS: ${{ matrix.targetos }}
      GH_CROSSCOMPILING: ${{ matrix.cross }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Install dependencies
      run: bash scripts/gha/deps_${{ matrix.targetos }}.sh
    - name: Build engine
      env:
        FWGS_PFX_PASSWORD: ${{ secrets.FWGS_PFX_PASSWORD }}
      run: bash scripts/gha/build_${{ matrix.targetos }}.sh
    - name: Create portable tarball for linux/i386 (engine + dependencies)
      if: ${{ matrix.targetos == 'linux' && matrix.targetarch == 'i386' }}
      run: |
        mkdir -p xash3d-i386-portable
        cp -r artifacts/* xash3d-i386-portable/
        tar -czvf xash3d-fwgs-linux-i386-portable.tar.gz -C xash3d-i386-portable .
    - name: Upload portable tarball (linux/i386)
      if: ${{ matrix.targetos == 'linux' && matrix.targetarch == 'i386' }}
      uses: actions/upload-artifact@v4
      with:
        name: xash3d-fwgs-linux-i386-portable
        path: xash3d-fwgs-linux-i386-portable.tar.gz
    - name: Upload engine (artifacts)
      if: ${{ !(matrix.targetos == 'linux' && matrix.targetarch == 'i386') }}
      uses: actions/upload-artifact@v4
      with:
        name: artifact-${{ matrix.targetos }}-${{ matrix.targetarch }}
        path: artifacts/*
  flatpak:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        include:
          - app: su.xash.Engine.Compat.i386
    container:
      image: ghcr.io/flathub-infra/flatpak-github-actions:freedesktop-24.08
      options: --privileged
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Build flatpak (Compat.i386)
      uses: FWGS/flatpak-github-actions/flatpak-builder@v6.5
      with:
        bundle: ${{ matrix.app }}.flatpak
        manifest-path: scripts/flatpak/${{ matrix.app }}.yml
  release:
    name: "Upload releases"
    runs-on: ubuntu-latest
    needs: [build, flatpak]
    if: ${{ github.event_name == 'push' }}
    steps:
    - name: Remove old release, fetch artifacts, repackage binaries and upload new release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_TAG: ${{ github.ref_name == 'master' && 'continuous' || format('continuous-{0}', github.ref_name) }}
      run: |
        gh release delete "$RELEASE_TAG" \
          --yes \
          --cleanup-tag \
          --repo "$GITHUB_REPOSITORY" || true
        gh run download "$GITHUB_RUN_ID" \
          --dir artifacts/ \
          --repo "$GITHUB_REPOSITORY"
        pushd artifacts/
        echo "Found artifacts:"
        ls
        for i in $(find -mindepth 1 -maxdepth 1 -type d); do
          mv "$i"/* .
          rm -rf "$i"
        done
        echo "Repackaged artifacts:"
        ls -R
        popd
        sleep 20s
        gh release create "$RELEASE_TAG" artifacts/* \
          --title "Xash3D FWGS Continuous ${{ github.ref_name }} Build" \
          --target $GITHUB_SHA \
          --repo "$GITHUB_REPOSITORY" \
          --prerelease
